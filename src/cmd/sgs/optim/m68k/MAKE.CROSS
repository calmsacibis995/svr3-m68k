#	@(#)MAKE.CROSS	7.2	
#
#****************************************************************************
#
# FUNCTION: MAKE.CROSS
#
# 	Shell script to create a cross version of optim, running on the VAX,
# 	for the M68000, M68010, or M68020 processors.  The new version will
#	be installed, if and only if, the positional parameter RELEASE is
#	specified.
#
# COMMAND LINE and PARAMETERS:
#
#	MAKE.CROSS [<PROC>] [RELEASE] [<macro definitions>]
#
#	PROC:			specifies the target processor (68000, 68010
#				or 68020)
#	RELEASE (release):	indicates this is NOT a test version and the
#				newly created optim will be installed in the
#				directory specified by DESTINATION
#	macro definitions:	a list, probably NULL, of macro definitions
#	
#	
# IMPORTED KEY WORDS:	(set in user's .profile file)
#
#	$DEFPROC:	The default target processor 
#
#	$ROOT00		These three variables define the root directory
#	$ROOT10		for the 68000, 68010, and 68020. Within the root
#	$ROOT20		directory and in its subdirectories reside the
#			files which are specific to the indicated processor.
#
# EXPORTED KEY WORDS:
#
#	none
#
# LOCAL KEY WORDS:
#
#	$SUFFIX:	the last two digits of the processor's name (i.e
#			00, 10, or 20).  This string is used to specify
#			the directories where the object and executable
#			files are stored.
#
#	$DESTINATION	this variable specifies the directory in which
#			the new version of optim will be installed.
#
#	$ERROR		contains the status of the make command which
#			builds optim
#
# SHELL SCRIPTS/MAKEFILES called by this shell:
#
#	makefile:	optim's makefile
#	where:		returns the name of the current environment
#	dovax:		change to the vax environment
#
# SHELL SCRIPTS/MAKEFILES which call this shell:
#
#	mk.cross	this shell controls the creation of a log file
#
# ALGORITHM:
#
#	This shell accomplishes its described task through the following
#	steps:
#
#	1. Determine the target processor.  This is accomplished either
#	   by the first positional parameter, by the user specifying it
#	   in interactive mode, or by default.
#
#	2. Check to see if the current environment is the VAX. If not,
#	   then change to it.
#
#	3. Delete the local copies of the optim and its object files (we
#	   don't know which environment it was developed from.)
#
#	4. Get a copy of the last version of optim and its object files
#	   from the appropriate directory.
#
#	5. Make a new version of optim.
#
#	6. If the positional parameter RELEASE exists then save the
#	   old copy of optim, and install the new one.
#
#	7. Copy the new version of optim and its object files back into
#	   the appropriate directory.
#
# ERRORS:
#
#	The keyword parameter DEFPROC must be defined and exported in users
#	.profile.
#
#****************************************************************************

echo "************************* optim MAKE.CROSS **************************"
echo "\nStarting MAKE.CROSS for optim. `date`\n"
echo "command line: mk.cross $*\n"

#
#	Scan the first positional parameter. If it is a PROC specification
#	then remember it and shift it off.  The PROC argument determines
#	the target processor.
#

case $1 in
   68000 | m68000 | M68000 | 00 |\
   68010 | m68010 | M68010 | 10 |\
   68020 | m68020 | M68020 | 20) 
	PROC=$1
	shift;;
   *) 	PROC="";;
esac

#	Verify that the user specified a PROC.  If one was not specified
#	then request that the user input a legal PROC. If the job is not
#	interactive, assign the default PROC.
#
#	Once a PROC has been determined, initialize DESTINATION 
#	and SUFFIX. 
#
#

SUFFIX=""
while [ "$SUFFIX" = "" ] 
   do
   case $PROC in

#	M68000 processor selected: 

      68000 |m68000 | M68000 | 00)
				SUFFIX="00"
			        if [ "$ROOT00" = "" ]
			           then
			           echo "**** ERROR **** Please define and export ROOT00 in your .profile\n"
			           exit 255
			        else
			           DESTINATION="$ROOT00"
			        fi;;

#	M68010 processor selected:

      68010 | m68010 | M68010 | 10)
				SUFFIX="10"
			        if [ "$ROOT10" = "" ]
			           then
			           echo "**** ERROR **** Please define and export ROOT10 in your .profile\n"
			           exit 255
			        else
			           DESTINATION="$ROOT10"
			        fi;;

#	M68020 processor selected: 

      68020 | m68020 | M68020 | 20)
				SUFFIX="20"
			        if [ "$ROOT20" = "" ]
			           then
			           echo "**** ERROR **** Please define and export ROOT20 in your .profile\n"
			           exit 255
			        else
			           DESTINATION="$ROOT20"
			        fi;;

#	The target processor has not been specified. Depending on the
#	means in which this shell was invoked (background or interactive)
#	obtain the target processor's name.

      *) if [ -t 0 ]
	    then
	    echo "Designate the target processor: M68000, M68010, or M68020"
	    PROC="`line`"
	    echo
	 else
	    case "$DEFPROC" in
	       68000 | m68000 | M68000 | 00 |\
	       68010 | m68010 | M68010 | 10 |\
	       68020 | m68020 | M68020 | 20) PROC="$DEFPROC";;
	       *)
	          echo "**** ERROR **** Please define and export DEFPROC in your .profile\n"
	          exit 255;;
	    esac
	 fi;;
      esac
done

#
# Place PROC in proper form for makefile.  This is necessary since it
# could have been interactivly entered.
#
case $PROC in
   68000 | m68000 | M68000 | 00)
	PROC=M68000;;
   68010 | m68010 | M68010 | 10)
	PROC=M68010;;
   68020 | m68020 | M68020 | 20) 
	PROC=M68020;;
esac

echo "Working in the M680$SUFFIX environment \n"

#
#	If not currently in the VAX environment, change to it.
#
if [ "`where`" != "vax" ]
   then
   . dovax
fi

#
#	Check for RELEASE flag
#

RELEASE=$1
if [ "$RELEASE" = "RELEASE" -o "$RELEASE" = "release" ]
   then
   shift
fi

#
#	Remove the local files (their environment characteristics
#	are unknown), and retrieve old object and optim for 
#	the specified processor.
#

make clobber PROCESSOR=$PROC
mv cross$SUFFIX/* .

#
#	Make optim 
#

echo "Make command line: make build ROOT=$DESTINATION PROCESSOR=$PROC $*\n"

make build ROOT=$DESTINATION PROCESSOR=$PROC $*

#
#	Save and Install optim only if the first positional parameter 
#	is RELEASE and the preceding make was successful.
#

ERROR=$?
if [ $ERROR = 0 ]
   then
   if [ "$RELEASE" = "RELEASE" -o "$RELEASE" = "release" ]
      then
      echo "Copying $DESTINATION/lib/optim to $DESTINATION/lib/optim.back\n"
      make save ROOT=$DESTINATION PROCESSOR=$PROC $*

      echo "Installing next release of optim onto $DESTINATION\n"
      make install ROOT=$DESTINATION PROCESSOR=$PROC GRP=port OWN=port $*
   else
      echo "Test version of optim has been created - optim was NOT installed\n"
   fi
else
   echo "make did not return successfully.  return value = $ERROR\n"
fi

#
#	Save executable and object files
#

mv optim *.o optab.c cross$SUFFIX
chmod 660 cross$SUFFIX/*.o
echo "executable and object files saved in cross$SUFFIX\n"
